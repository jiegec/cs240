diff --git a/.vscode/settings.json b/.vscode/settings.json
index e69de29..f5d622f 100644
--- a/.vscode/settings.json
+++ b/.vscode/settings.json
@@ -0,0 +1,3 @@
+{
+    "cquery.cacheDirectory": "${workspaceFolder}/.vscode/cquery_cached_index/"
+}
\ No newline at end of file
diff --git a/compile_commands.json b/compile_commands.json
index e69de29..db9257d 100644
--- a/compile_commands.json
+++ b/compile_commands.json
@@ -0,0 +1,36 @@
+[
+ {
+  "directory": "/Volumes/Data/cs240/lab1", 
+  "arguments": [
+   "cc", 
+   "-Wall", 
+   "-Wextra", 
+   "-Werror", 
+   "-Wswitch-default", 
+   "-Wwrite-strings", 
+   "-Iinclude", 
+   "-Itest/include", 
+   "-std=gnu99", 
+   "-c", 
+   "src/main.c"
+  ], 
+  "file": "src/main.c"
+ }, 
+ {
+  "directory": "/Volumes/Data/cs240/lab1", 
+  "arguments": [
+   "cc", 
+   "-Wall", 
+   "-Wextra", 
+   "-Werror", 
+   "-Wswitch-default", 
+   "-Wwrite-strings", 
+   "-Iinclude", 
+   "-Itest/include", 
+   "-std=gnu99", 
+   "-c", 
+   "src/thread.c"
+  ], 
+  "file": "src/thread.c"
+ }
+]
diff --git a/src/context_switch.S b/src/context_switch.S
index e0186dc..f83bebf 100644
--- a/src/context_switch.S
+++ b/src/context_switch.S
@@ -15,6 +15,30 @@
 .globl grn_context_switch
 grn_context_switch:
   // FIXME: Save the old context, restore the new.
+  // old_context in rdi, new_context in rsi
+  movq %rsp, %rax
+  movq %rax, (%rdi)
+  movq %r15, %rax
+  movq %rax, 0x8(%rdi)
+  movq %r14, %rax
+  movq %rax, 0x10(%rdi)
+  movq %r13, %rax
+  movq %rax, 0x18(%rdi)
+  movq %r12, %rax
+  movq %rax, 0x20(%rdi)
+  movq %rbx, %rax
+  movq %rax, 0x28(%rdi)
+  movq %rbp, %rax
+  movq %rax, 0x30(%rdi)
+
+  movq (%rsi), %rsp
+  movq 0x8(%rsi), %r15
+  movq 0x10(%rsi), %r14
+  movq 0x18(%rsi), %r13
+  movq 0x20(%rsi), %r12
+  movq 0x28(%rsi), %rbx
+  movq 0x30(%rsi), %rbp
+  ret
 
 /**
  * Initial function implicitly executed by a thread.
diff --git a/src/main.c b/src/main.c
index 5e801b7..b9618f0 100644
--- a/src/main.c
+++ b/src/main.c
@@ -18,10 +18,7 @@
 /*
  * Initial global state.
  */
-chloros_state STATE = {
-  .threads = NULL,
-  .current = NULL
-};
+chloros_state STATE = {.threads = NULL, .current = NULL};
 
 /**
  * Initializes the choloros green thread library.
@@ -55,10 +52,18 @@ void grn_init(bool preempt) {
  * @return The thread ID of the newly spawned process.
  */
 int grn_spawn(grn_fn fn) {
-  UNUSED(fn);
-
   // FIXME: Allocate a new thread, initialize its context, then yield.
-  return 0;
+  grn_thread* new_thread = grn_new_thread(true);
+
+  uint64_t* stack_top = (uint64_t*)(new_thread->stack + STACK_SIZE);
+  *(--stack_top) = (uint64_t)fn;
+  *(--stack_top) = (uint64_t)start_thread;
+  new_thread->context.rsp = (uint64_t)stack_top;
+
+  new_thread->status = READY;
+
+  grn_yield();
+  return new_thread->id;
 }
 
 /**
@@ -68,6 +73,14 @@ int grn_spawn(grn_fn fn) {
  */
 void grn_gc() {
   // FIXME: Free the memory of zombied threads.
+  grn_thread* current_thread = STATE.threads;
+  while (current_thread) {
+    grn_thread* next_thread = current_thread->next;
+    if (current_thread->status == ZOMBIE) {
+      grn_destroy_thread(current_thread);
+    }
+    current_thread = next_thread;
+  }
 }
 
 /**
@@ -83,7 +96,28 @@ void grn_gc() {
  */
 int grn_yield() {
   // FIXME: Yield the current thread's execution time to another READY thread.
-  return -1;
+  grn_thread* current_thread = STATE.current;
+  bool has_ready = false;
+  while ((current_thread = next_thread(current_thread)) != STATE.current) {
+    if (current_thread->status == READY) {
+      has_ready = true;
+      break;
+    }
+  }
+
+  if (!has_ready)
+    return -1;
+
+  if (STATE.current->status == RUNNING) {
+    STATE.current->status = READY;
+  }
+
+  grn_context* old_context = &STATE.current->context;
+  STATE.current = current_thread;
+  STATE.current->status = RUNNING;
+
+  grn_context_switch(old_context, &STATE.current->context);
+  return 0;
 }
 
 /**
@@ -97,7 +131,8 @@ int grn_yield() {
  */
 int grn_wait() {
   // Loop until grn_yield returns nonzero.
-  while (!grn_yield());
+  while (!grn_yield())
+    ;
 
   return 0;
 }
@@ -122,7 +157,9 @@ void grn_exit() {
 /**
  * For compatbility across name manglers.
  */
-void _grn_exit() { grn_exit(); }
+void _grn_exit() {
+  grn_exit();
+}
 
 /**
  * Returns a pointer to the current thread if there is one. This pointer is only
@@ -131,6 +168,6 @@ void _grn_exit() { grn_exit(); }
  * @return a pointer to the current thread or NULL if the library hasn't been
  * initialized
  */
-grn_thread *grn_current() {
+grn_thread* grn_current() {
   return STATE.current;
 }
diff --git a/src/thread.c b/src/thread.c
index 4b51405..9fdd593 100644
--- a/src/thread.c
+++ b/src/thread.c
@@ -31,7 +31,7 @@ int64_t atomic_next_id() {
  *
  * @param thread the thread to add to the linked list; must be non-null
  */
-void add_thread(grn_thread *thread) {
+void add_thread(grn_thread* thread) {
   assert(thread);
   if (STATE.threads) {
     STATE.threads->prev = thread;
@@ -48,7 +48,7 @@ void add_thread(grn_thread *thread) {
  *
  * @param thread the thread being removed from linked list; must be non-null
  */
-void remove_thread(grn_thread *thread) {
+void remove_thread(grn_thread* thread) {
   assert(thread);
   if (STATE.threads == thread) {
     STATE.threads = thread->next;
@@ -73,7 +73,7 @@ void remove_thread(grn_thread *thread) {
  *
  * @return a pointer to the thread after `thread`
  */
-grn_thread *next_thread(grn_thread *thread) {
+grn_thread* next_thread(grn_thread* thread) {
   assert(thread);
   return (thread->next) ? thread->next : STATE.threads;
 }
@@ -91,11 +91,21 @@ grn_thread *next_thread(grn_thread *thread) {
  *
  * @return a pointer to the newly allocated grn_thread structure
  */
-grn_thread *grn_new_thread(bool alloc_stack) {
-  UNUSED(alloc_stack);
-
+grn_thread* grn_new_thread(bool alloc_stack) {
   // FIXME: Allocate a new thread and stack.
-  return NULL;
+  grn_thread* thread = (grn_thread*)malloc(sizeof(grn_thread));
+  assert(thread);
+
+  memset(thread, 0, sizeof(grn_thread));
+  thread->id = atomic_next_id();
+  thread->status = WAITING;
+  add_thread(thread);
+
+  if (alloc_stack) {
+    posix_memalign((void**)&thread->stack, 16, STACK_SIZE);
+  }
+
+  return thread;
 }
 
 /**
@@ -104,10 +114,16 @@ grn_thread *grn_new_thread(bool alloc_stack) {
  *
  * @param thread the thread to deallocate and remove from linked list
  */
-void grn_destroy_thread(grn_thread *thread) {
-  UNUSED(thread);
-
+void grn_destroy_thread(grn_thread* thread) {
   // FIXME: Free the resources used by `thread`.
+  remove_thread(thread);
+
+  if (thread->stack) {
+    free(thread->stack);
+    thread->stack = NULL;
+  }
+
+  free(thread);
 }
 
 /**
@@ -115,14 +131,23 @@ void grn_destroy_thread(grn_thread *thread) {
  *
  * @param thread the thread to debug pretty-print
  */
-void debug_thread_print(grn_thread *thread) {
-  const char *status;
+void debug_thread_print(grn_thread* thread) {
+  const char* status;
   switch (thread->status) {
-    case WAITING: status = "WAITING"; break;
-    case READY: status = "READY"; break;
-    case RUNNING: status = "RUNNING"; break;
-    case ZOMBIE: status = "ZOMBIE"; break;
-    default: status = "UNKNOWN";
+    case WAITING:
+      status = "WAITING";
+      break;
+    case READY:
+      status = "READY";
+      break;
+    case RUNNING:
+      status = "RUNNING";
+      break;
+    case ZOMBIE:
+      status = "ZOMBIE";
+      break;
+    default:
+      status = "UNKNOWN";
   }
 
   fprintf(stderr, ":: Thread ID:\t %" PRId64 "\n", thread->id);
